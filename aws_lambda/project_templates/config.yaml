region: us-east-1

function_name: my_lambda_function
handler: service.handler
description: My first lambda function
runtime: python2.7
# role:
#    name: lambda_basic_execution
#    policy_name: lambda_basic_policy
#    policy_document: policy.json

# S3 upload requires appropriate role with s3:PutObject permission
# (ex. basic_s3_upload), a destination bucket, and the key prefix
# bucket_name: 'example-bucket'
# s3_key_prefix: 'path/to/file/'

# if access key and secret are left blank, boto will use the credentials
# defined in the [default] section of ~/.aws/credentials.
aws_access_key_id:
aws_secret_access_key:

# dist_directory: dist
# timeout: 15
# memory_size: 512
#

# Experimental Environment variables
environment_variables:
    env_1: foo
    env_2: baz

# Build options
build:
  source_directories: lib # a comma delimited list of directories in your project root that contains source to package.
trigger:
  name: 'trigger_name'
  type: bucket | event # bucket if lambda is suppose to ba launchede on S3 event, event in case of CloudWatchEvent
  # Configuration template below, edit according to your configuration
  # S3 configuration
  bucket_name: 'bucket_name'
  events:
    - 's3:ReducedRedundancyLostObject'
    - 's3:ObjectCreated:*'
    - 's3:ObjectCreated:Put'
    - 's3:ObjectCreated:Post'
    - 's3:ObjectCreated:Copy'
    - 's3:ObjectCreated:CompleteMultipartUpload'
    - 's3:ObjectRemoved:*'
    - 's3:ObjectRemoved:Delete'
    - 's3:ObjectRemoved:DeleteMarkerCreated'
  # S3 configuration end
  # CloudWatch configuration (cron)
  frequency: "rate(1 hour)" # cron(0 12 * * ? *) - daily at 12.00 UTC
