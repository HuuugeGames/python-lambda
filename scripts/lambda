#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import click
import aws_lambda
import logging

CURRENT_DIR = os.getcwd()

logging.getLogger('pip').setLevel(logging.CRITICAL)


@click.group()
def cli():
    pass


@click.command(help='Create a new function for Lambda.')
@click.option(
    '--minimal', default=False, is_flag=True,
    help='Exclude any unnecessary template files',
)
@click.argument(
    'folder', nargs=-1,
    type=click.Path(file_okay=False, writable=True),
)
def init(folder, minimal):
    path = CURRENT_DIR
    if len(folder) > 0:
        path = os.path.join(CURRENT_DIR, *folder)
        if not os.path.exists(path):
            os.makedirs(path)
    aws_lambda.init(path, minimal=minimal)


@click.command(help='Bundles package for deployment.')
@click.option(
    '--use-requirements', default=False, is_flag=True,
    help='Install all packages defined in requirements.txt',
)
@click.option(
    '--local-package', default=None, type=click.Path(),
    help='Install local package as well.', multiple=True,
)
@click.option(
    '--config-file-path', default=None, type=click.Path(),
    help='Path to custom config.yaml file', multiple=False
)
def build(use_requirements, local_package, config_file_path=None):
    aws_lambda.build(CURRENT_DIR, use_requirements, local_package, config_file_path)


@click.command(help='Run a local test of your function.')
@click.option('--event-file', default=None, help='Alternate event file.')
@click.option('--verbose', '-v', is_flag=True)
@click.option(
    '--config-file-path', default=None, type=click.Path(),
    help='Path to custom config.yaml file', multiple=False
)
def invoke(event_file, verbose, config_file_path):
    aws_lambda.invoke(CURRENT_DIR, event_file, verbose, config_file_path)


@click.command(help='Register and deploy your code to lambda.')
@click.option(
    '--use-requirements', default=False, is_flag=True,
    help='Install all packages defined in requirements.txt',
)
@click.option(
    '--local-package', default=None, type=click.Path(),
    help='Install local package as well.', multiple=True,
)
@click.option(
    '--config-file-path', default=None, type=click.Path(),
    help='Path to custom config.yaml file', multiple=False
)
@click.option(
    '--aws-profile', default=None, type=click.STRING,
    help='AWS profile name.', multiple=False
)
def deploy(use_requirements, local_package, config_file_path, aws_profile):
    aws_lambda.deploy(CURRENT_DIR, use_requirements, local_package, config_file_path=config_file_path,
                      aws_profile=aws_profile)


@click.command(help='Deploy your code to S3 and register to lambda.')
@click.option(
    '--use-requirements', default=False, is_flag=True,
    help='Install all packages defined in requirements.txt',
)
@click.option(
    '--local-package', default=None, type=click.Path(),
    help='Install local package as well.', multiple=True,
)
@click.option(
    '--config-file-path', default=None, type=click.Path(),
    help='Path to custom config.yaml file', multiple=False
)
@click.option(
    '--aws-profile', default=None, type=click.STRING,
    help='AWS profile name.', multiple=False
)
def deploy_s3(use_requirements, local_package, config_file_path, aws_profile):
    aws_lambda.deploy(CURRENT_DIR, use_requirements, local_package, upload_to_s3=True,
                      config_file_path=config_file_path, aws_profile=aws_profile)


@click.command(help='Upload your lambda to S3.')
@click.option(
    '--use-requirements', default=False, is_flag=True,
    help='Install all packages defined in requirements.txt',
)
@click.option(
    '--local-package', default=None, type=click.Path(),
    help='Install local package as well.', multiple=True,
)
@click.option(
    '--config-file-path', default=None, type=click.Path(),
    help='Path to custom config.yaml file', multiple=False
)
@click.option(
    '--aws-profile', default=None, type=click.STRING,
    help='AWS profile name.', multiple=False
)
def upload(use_requirements, local_package, config_file_path, aws_profile):
    aws_lambda.upload(CURRENT_DIR, use_requirements, local_package, config_file_path=config_file_path,
                      aws_profile=aws_profile)


@click.command(help='Delete old versions of your functions')
@click.option(
    '--keep-last', type=int,
    prompt='Please enter the number of recent versions to keep',
)
@click.option(
    '--config-file-path', default=None, type=click.Path(),
    help='Path to custom config.yaml file', multiple=False
)
def cleanup(keep_last, config_file_path):
    aws_lambda.cleanup_old_versions(CURRENT_DIR, keep_last, config_file_path=config_file_path)


if __name__ == '__main__':
    cli.add_command(init)
    cli.add_command(invoke)
    cli.add_command(deploy)
    cli.add_command(deploy_s3)
    cli.add_command(upload)
    cli.add_command(build)
    cli.add_command(cleanup)
    cli()
